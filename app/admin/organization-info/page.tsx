'use client'

import { useState, useEffect } from 'react'
import { Save, FileText, Edit, Eye, Plus, Trash2 } from 'lucide-react'
import { toast } from 'react-hot-toast'

interface ContentItem {
  id: number
  key: string
  title: string
  content: string
  type: 'TEXT' | 'HTML' | 'MARKDOWN'
  page: string
  section?: string
  isActive: boolean
  createdAt: string
  updatedAt: string
}

interface ContentSection {
  key: string
  title: string
  description: string
  icon: string
  sections: {
    key: string
    title: string
    description: string
  }[]
}

const INFO_SECTIONS: ContentSection[] = [
  {
    key: 'basic',
    title: '–û—Å–Ω–æ–≤–Ω—ã–µ —Å–≤–µ–¥–µ–Ω–∏—è',
    description: '–û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏',
    icon: 'üè¢',
    sections: [
      { key: 'info', title: '–û–±—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è', description: '–ù–∞–∑–≤–∞–Ω–∏–µ, –∞–¥—Ä–µ—Å, –∫–æ–Ω—Ç–∞–∫—Ç—ã' },
      { key: 'history', title: '–ò—Å—Ç–æ—Ä–∏—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏', description: '–ò—Å—Ç–æ—Ä–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –∏ —Ä–∞–∑–≤–∏—Ç–∏—è' },
      { key: 'mission', title: '–ú–∏—Å—Å–∏—è –∏ —Ü–µ–ª–∏', description: '–ú–∏—Å—Å–∏—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ –∏ –æ—Å–Ω–æ–≤–Ω—ã–µ —Ü–µ–ª–∏' }
    ]
  },
  {
    key: 'structure',
    title: '–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –∏ –æ—Ä–≥–∞–Ω—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è',
    description: '–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω–æ–π –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏',
    icon: 'üë•',
    sections: [
      { key: 'management', title: '–û—Ä–≥–∞–Ω—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è', description: '–ö–æ–ª–ª–µ–≥–∏–∞–ª—å–Ω—ã–µ –æ—Ä–≥–∞–Ω—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è' },
      { key: 'structure', title: '–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–æ–Ω–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞', description: '–°—Ç—Ä—É–∫—Ç—É—Ä–Ω—ã–µ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è' }
    ]
  },
  {
    key: 'education',
    title: '–û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ',
    description: '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–µ–∞–ª–∏–∑—É–µ–º—ã—Ö –ø—Ä–æ–≥—Ä–∞–º–º–∞—Ö',
    icon: 'üìö',
    sections: [
      { key: 'programs', title: '–û–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã', description: '–ü–µ—Ä–µ—á–µ–Ω—å —Ä–µ–∞–ª–∏–∑—É–µ–º—ã—Ö –ø—Ä–æ–≥—Ä–∞–º–º' },
      { key: 'schedule', title: '–£—á–µ–±–Ω—ã–π –ø–ª–∞–Ω', description: '–ö–∞–ª–µ–Ω–¥–∞—Ä–Ω—ã–π —É—á–µ–±–Ω—ã–π –≥—Ä–∞—Ñ–∏–∫' },
      { key: 'methods', title: '–ú–µ—Ç–æ–¥–∏—á–µ—Å–∫–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã', description: '–ú–µ—Ç–æ–¥–∏—á–µ—Å–∫–∏–µ –∏ –∏–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã' }
    ]
  },
  {
    key: 'standards',
    title: '–û–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç—ã',
    description: '–°—Ç–∞–Ω–¥–∞—Ä—Ç—ã –∏ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è',
    icon: 'üèÜ',
    sections: [
      { key: 'federal', title: '–§–µ–¥–µ—Ä–∞–ª—å–Ω—ã–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç—ã', description: '–§–ì–û–° –∏ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è' },
      { key: 'professional', title: '–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç—ã', description: '–ü—Ä–æ—Ñ—Å—Ç–∞–Ω–¥–∞—Ä—Ç—ã –¥–ª—è –ø—Ä–æ–≥—Ä–∞–º–º –î–ü–û' }
    ]
  },
  {
    key: 'staff',
    title: '–ü–µ–¥–∞–≥–æ–≥–∏—á–µ—Å–∫–∏–π —Å–æ—Å—Ç–∞–≤',
    description: '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–µ–¥–∞–≥–æ–≥–∏—á–µ—Å–∫–∏—Ö —Ä–∞–±–æ—Ç–Ω–∏–∫–∞—Ö',
    icon: 'üë®‚Äçüè´',
    sections: [
      { key: 'teachers', title: '–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–∏', description: '–°–æ—Å—Ç–∞–≤ –ø–µ–¥–∞–≥–æ–≥–∏—á–µ—Å–∫–∏—Ö —Ä–∞–±–æ—Ç–Ω–∏–∫–æ–≤' },
      { key: 'qualifications', title: '–ö–≤–∞–ª–∏—Ñ–∏–∫–∞—Ü–∏–∏', description: '–û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –∏ –∫–≤–∞–ª–∏—Ñ–∏–∫–∞—Ü–∏—è' }
    ]
  },
  {
    key: 'facilities',
    title: '–ú–∞—Ç–µ—Ä–∏–∞–ª—å–Ω–æ-—Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ –æ–±–µ—Å–ø–µ—á–µ–Ω–∏–µ',
    description: '–û—Å–Ω–∞—â—ë–Ω–Ω–æ—Å—Ç—å –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞',
    icon: 'üèóÔ∏è',
    sections: [
      { key: 'equipment', title: '–û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ', description: '–£—á–µ–±–Ω–æ–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ –∏ —Ç–µ—Ö–Ω–∏–∫–∞' },
      { key: 'library', title: '–ë–∏–±–ª–∏–æ—Ç–µ–∫–∞', description: '–ë–∏–±–ª–∏–æ—Ç–µ—á–Ω–æ-–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ä–µ—Å—É—Ä—Å—ã' },
      { key: 'digital', title: '–¶–∏—Ñ—Ä–æ–≤—ã–µ —Ä–µ—Å—É—Ä—Å—ã', description: '–≠–ª–µ–∫—Ç—Ä–æ–Ω–Ω—ã–µ —Ä–µ—Å—É—Ä—Å—ã –∏ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã' }
    ]
  },
  {
    key: 'support',
    title: '–°—Ç–∏–ø–µ–Ω–¥–∏–∏ –∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∞',
    description: '–ú–µ—Ä—ã –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –æ–±—É—á–∞—é—â–∏—Ö—Å—è',
    icon: '‚ù§Ô∏è',
    sections: [
      { key: 'scholarships', title: '–°—Ç–∏–ø–µ–Ω–¥–∏–∏', description: '–°—Ç–∏–ø–µ–Ω–¥–∏–∞–ª—å–Ω–æ–µ –æ–±–µ—Å–ø–µ—á–µ–Ω–∏–µ' },
      { key: 'support', title: '–ú–µ—Ä—ã –ø–æ–¥–¥–µ—Ä–∂–∫–∏', description: '–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ä—ã –ø–æ–¥–¥–µ—Ä–∂–∫–∏' }
    ]
  },
  {
    key: 'paid-services',
    title: '–ü–ª–∞—Ç–Ω—ã–µ —É—Å–ª—É–≥–∏',
    description: '–ü–ª–∞—Ç–Ω—ã–µ –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã–µ —É—Å–ª—É–≥–∏',
    icon: 'üí∞',
    sections: [
      { key: 'services', title: '–ü–µ—Ä–µ—á–µ–Ω—å —É—Å–ª—É–≥', description: '–î–æ–∫—É–º–µ–Ω—Ç—ã –æ –ø–ª–∞—Ç–Ω—ã—Ö —É—Å–ª—É–≥–∞—Ö' },
      { key: 'contracts', title: '–î–æ–≥–æ–≤–æ—Ä—ã', description: '–û–±—Ä–∞–∑—Ü—ã –¥–æ–≥–æ–≤–æ—Ä–æ–≤' }
    ]
  },
  {
    key: 'financial',
    title: '–§–∏–Ω–∞–Ω—Å–æ–≤–æ-—Ö–æ–∑—è–π—Å—Ç–≤–µ–Ω–Ω–∞—è –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç—å',
    description: '–§–∏–Ω–∞–Ω—Å–æ–≤–∞—è –æ—Ç—á—ë—Ç–Ω–æ—Å—Ç—å',
    icon: 'ÔøΩÔøΩÔøΩÔøΩ',
    sections: [
      { key: 'budget', title: '–ë—é–¥–∂–µ—Ç', description: '–û–±—ä—ë–º –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω–æ–π –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏' },
      { key: 'reports', title: '–û—Ç—á—ë—Ç—ã', description: '–§–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –æ—Ç—á—ë—Ç—ã' }
    ]
  },
  {
    key: 'vacancies',
    title: '–í–∞–∫–∞–Ω—Ç–Ω—ã–µ –º–µ—Å—Ç–∞',
    description: '–ú–µ—Å—Ç–∞ –¥–ª—è –ø—Ä–∏—ë–º–∞ –æ–±—É—á–∞—é—â–∏—Ö—Å—è',
    icon: 'üìç',
    sections: [
      { key: 'admission', title: '–í–∞–∫–∞–Ω—Ç–Ω—ã–µ –º–µ—Å—Ç–∞', description: '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∞–∫–∞–Ω—Ç–Ω—ã—Ö –º–µ—Å—Ç' }
    ]
  },
  {
    key: 'international',
    title: '–ú–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω–æ–µ —Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–æ',
    description: '–ú–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω–∞—è –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç—å',
    icon: 'üåç',
    sections: [
      { key: 'cooperation', title: '–°–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–æ', description: '–ú–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω—ã–µ —Å–æ–≥–ª–∞—à–µ–Ω–∏—è' }
    ]
  }
]

export default function OrganizationInfoAdmin() {
  const [selectedSection, setSelectedSection] = useState<string>('')
  const [selectedSubsection, setSelectedSubsection] = useState<string>('')
  const [content, setContent] = useState<ContentItem[]>([])
  const [loading, setLoading] = useState(false)
  const [editingItem, setEditingItem] = useState<ContentItem | null>(null)
  const [showEditor, setShowEditor] = useState(false)

  useEffect(() => {
    if (selectedSection) {
      loadContent()
    }
  }, [selectedSection])

  const loadContent = async () => {
    try {
      setLoading(true)
      const response = await fetch(`/api/content?page=info-${selectedSection}`)
      const data = await response.json()
      setContent(data.content || [])
    } catch (error) {
      toast.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞')
    } finally {
      setLoading(false)
    }
  }

  const saveContent = async (item: Partial<ContentItem>) => {
    try {
      const method = item.id ? 'PUT' : 'POST'
      const url = item.id ? `/api/content/${item.id}` : '/api/content'
      
      const response = await fetch(url, {
        method,
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          ...item,
          page: `info-${selectedSection}`,
          section: selectedSubsection || null
        })
      })

      if (!response.ok) {
        throw new Error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è')
      }

      toast.success('–ö–æ–Ω—Ç–µ–Ω—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω')
      setShowEditor(false)
      setEditingItem(null)
      loadContent()
    } catch (error) {
      toast.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞')
    }
  }

  const deleteContent = async (id: number) => {
    if (!confirm('–£–¥–∞–ª–∏—Ç—å —ç—Ç–æ—Ç –∫–æ–Ω—Ç–µ–Ω—Ç?')) return

    try {
      const response = await fetch(`/api/content/${id}`, {
        method: 'DELETE'
      })

      if (!response.ok) {
        throw new Error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è')
      }

      toast.success('–ö–æ–Ω—Ç–µ–Ω—Ç —É–¥–∞–ª–µ–Ω')
      loadContent()
    } catch (error) {
      toast.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞')
    }
  }

  const currentSection = INFO_SECTIONS.find(s => s.key === selectedSection)
  const filteredContent = selectedSubsection 
    ? content.filter(c => c.section === selectedSubsection)
    : content.filter(c => !c.section)

  return (
    <div className="space-y-6">
      <div className="flex justify-between items-center">
        <h1 className="text-2xl font-bold text-edu-navy">
          –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–≤–µ–¥–µ–Ω–∏–π –æ–± –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏
        </h1>
      </div>

      <div className="grid grid-cols-1 lg:grid-cols-4 gap-6">
        {/* Section Selector */}
        <div className="lg:col-span-1">
          <div className="bg-white rounded-lg shadow-md p-4">
            <h3 className="font-semibold text-gray-900 mb-4">–†–∞–∑–¥–µ–ª—ã</h3>
            <div className="space-y-2">
              {INFO_SECTIONS.map((section) => (
                <button
                  key={section.key}
                  onClick={() => {
                    setSelectedSection(section.key)
                    setSelectedSubsection('')
                  }}
                  className={`w-full text-left p-3 rounded-lg transition-colors ${
                    selectedSection === section.key
                      ? 'bg-edu-blue text-white'
                      : 'hover:bg-gray-100 text-gray-700'
                  }`}
                >
                  <div className="flex items-center space-x-2">
                    <span className="text-lg">{section.icon}</span>
                    <div className="flex-1">
                      <div className="font-medium text-sm">{section.title}</div>
                      <div className="text-xs opacity-75">{section.description}</div>
                    </div>
                  </div>
                </button>
              ))}
            </div>
          </div>
        </div>

        {/* Content Area */}
        <div className="lg:col-span-3">
          {!selectedSection ? (
            <div className="bg-white rounded-lg shadow-md p-8 text-center">
              <FileText className="h-16 w-16 mx-auto mb-4 text-gray-400" />
              <h3 className="text-lg font-medium text-gray-900 mb-2">
                –í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
              </h3>
              <p className="text-gray-500">
                –í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –∏–∑ —Å–ø–∏—Å–∫–∞ —Å–ª–µ–≤–∞ –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞
              </p>
            </div>
          ) : (
            <div className="space-y-6">
              {/* Subsection Tabs */}
              {currentSection && currentSection.sections.length > 0 && (
                <div className="bg-white rounded-lg shadow-md p-4">
                  <div className="flex flex-wrap gap-2">
                    <button
                      onClick={() => setSelectedSubsection('')}
                      className={`px-4 py-2 rounded-lg font-medium transition-colors ${
                        !selectedSubsection
                          ? 'bg-edu-blue text-white'
                          : 'bg-gray-100 text-gray-700 hover:bg-gray-200'
                      }`}
                    >
                      –û–±—â–µ–µ
                    </button>
                    {currentSection.sections.map((subsection) => (
                      <button
                        key={subsection.key}
                        onClick={() => setSelectedSubsection(subsection.key)}
                        className={`px-4 py-2 rounded-lg font-medium transition-colors ${
                          selectedSubsection === subsection.key
                            ? 'bg-edu-blue text-white'
                            : 'bg-gray-100 text-gray-700 hover:bg-gray-200'
                        }`}
                      >
                        {subsection.title}
                      </button>
                    ))}
                  </div>
                </div>
              )}

              {/* Content Management */}
              <div className="bg-white rounded-lg shadow-md">
                <div className="p-6 border-b border-gray-200">
                  <div className="flex justify-between items-center">
                    <div>
                      <h2 className="text-xl font-semibold text-gray-900">
                        {currentSection?.title}
                        {selectedSubsection && ` - ${currentSection?.sections.find(s => s.key === selectedSubsection)?.title}`}
                      </h2>
                      <p className="text-gray-600 mt-1">
                        {selectedSubsection 
                          ? currentSection?.sections.find(s => s.key === selectedSubsection)?.description
                          : currentSection?.description
                        }
                      </p>
                    </div>
                    <button
                      onClick={() => {
                        setEditingItem({
                          id: 0,
                          key: '',
                          title: '',
                          content: '',
                          type: 'HTML',
                          page: `info-${selectedSection}`,
                          section: selectedSubsection || undefined,
                          isActive: true,
                          createdAt: '',
                          updatedAt: ''
                        })
                        setShowEditor(true)
                      }}
                      className="bg-edu-blue hover:bg-edu-navy text-white px-4 py-2 rounded-lg font-medium transition-colors flex items-center"
                    >
                      <Plus className="h-4 w-4 mr-2" />
                      –î–æ–±–∞–≤–∏—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç
                    </button>
                  </div>
                </div>

                <div className="p-6">
                  {loading ? (
                    <div className="text-center py-8">
                      <div className="text-gray-500">–ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞...</div>
                    </div>
                  ) : filteredContent.length === 0 ? (
                    <div className="text-center py-8">
                      <FileText className="h-12 w-12 mx-auto mb-4 text-gray-400" />
                      <h3 className="text-lg font-medium text-gray-900 mb-2">
                        –ö–æ–Ω—Ç–µ–Ω—Ç –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω
                      </h3>
                      <p className="text-gray-500">
                        –î–æ–±–∞–≤—å—Ç–µ –ø–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –¥–ª—è —ç—Ç–æ–≥–æ —Ä–∞–∑–¥–µ–ª–∞
                      </p>
                    </div>
                  ) : (
                    <div className="space-y-4">
                      {filteredContent.map((item) => (
                        <div
                          key={item.id}
                          className="border border-gray-200 rounded-lg p-4 hover:shadow-md transition-shadow"
                        >
                          <div className="flex justify-between items-start">
                            <div className="flex-1">
                              <h4 className="font-medium text-gray-900 mb-2">
                                {item.title}
                              </h4>
                              <div 
                                className="text-gray-600 text-sm line-clamp-3"
                                dangerouslySetInnerHTML={{ 
                                  __html: item.content.substring(0, 200) + (item.content.length > 200 ? '...' : '')
                                }}
                              />
                              <div className="flex items-center space-x-4 mt-2 text-xs text-gray-500">
                                <span>–¢–∏–ø: {item.type}</span>
                                <span>–ö–ª—é—á: {item.key}</span>
                                <span className={`px-2 py-1 rounded ${
                                  item.isActive ? 'bg-green-100 text-green-800' : 'bg-red-100 text-red-800'
                                }`}>
                                  {item.isActive ? '–ê–∫—Ç–∏–≤–Ω–æ' : '–ù–µ–∞–∫—Ç–∏–≤–Ω–æ'}
                                </span>
                              </div>
                            </div>
                            <div className="flex items-center space-x-2 ml-4">
                              <button
                                onClick={() => {
                                  setEditingItem(item)
                                  setShowEditor(true)
                                }}
                                className="text-blue-600 hover:text-blue-800 p-2"
                                title="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å"
                              >
                                <Edit className="h-4 w-4" />
                              </button>
                              <button
                                onClick={() => deleteContent(item.id)}
                                className="text-red-600 hover:text-red-800 p-2"
                                title="–£–¥–∞–ª–∏—Ç—å"
                              >
                                <Trash2 className="h-4 w-4" />
                              </button>
                            </div>
                          </div>
                        </div>
                      ))}
                    </div>
                  )}
                </div>
              </div>
            </div>
          )}
        </div>
      </div>

      {/* Content Editor Modal */}
      {showEditor && editingItem && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4">
          <div className="bg-white rounded-lg shadow-xl max-w-4xl w-full max-h-[90vh] overflow-hidden">
            <div className="flex justify-between items-center p-6 border-b border-gray-200">
              <h3 className="text-lg font-semibold text-gray-900">
                {editingItem.id ? '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç' : '–î–æ–±–∞–≤–∏—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç'}
              </h3>
              <button
                onClick={() => {
                  setShowEditor(false)
                  setEditingItem(null)
                }}
                className="text-gray-400 hover:text-gray-600"
              >
                √ó
              </button>
            </div>
            
            <div className="p-6 overflow-y-auto max-h-[70vh]">
              <div className="space-y-4">
                <div className="grid grid-cols-2 gap-4">
                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-1">
                      –ó–∞–≥–æ–ª–æ–≤–æ–∫ *
                    </label>
                    <input
                      type="text"
                      value={editingItem.title}
                      onChange={(e) => setEditingItem({...editingItem, title: e.target.value})}
                      className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-edu-blue"
                      required
                    />
                  </div>
                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-1">
                      –ö–ª—é—á *
                    </label>
                    <input
                      type="text"
                      value={editingItem.key}
                      onChange={(e) => setEditingItem({...editingItem, key: e.target.value})}
                      className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-edu-blue"
                      required
                    />
                  </div>
                </div>

                <div className="grid grid-cols-2 gap-4">
                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-1">
                      –¢–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞
                    </label>
                    <select
                      value={editingItem.type}
                      onChange={(e) => setEditingItem({...editingItem, type: e.target.value as 'TEXT' | 'HTML' | 'MARKDOWN'})}
                      className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-edu-blue"
                    >
                      <option value="TEXT">–¢–µ–∫—Å—Ç</option>
                      <option value="HTML">HTML</option>
                      <option value="MARKDOWN">Markdown</option>
                    </select>
                  </div>
                  <div className="flex items-center">
                    <label className="flex items-center">
                      <input
                        type="checkbox"
                        checked={editingItem.isActive}
                        onChange={(e) => setEditingItem({...editingItem, isActive: e.target.checked})}
                        className="mr-2"
                      />
                      –ê–∫—Ç–∏–≤–Ω–æ
                    </label>
                  </div>
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-1">
                    –°–æ–¥–µ—Ä–∂–∏–º–æ–µ *
                  </label>
                  <textarea
                    value={editingItem.content}
                    onChange={(e) => setEditingItem({...editingItem, content: e.target.value})}
                    rows={12}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-edu-blue"
                    required
                  />
                </div>
              </div>
            </div>

            <div className="flex justify-end space-x-3 p-6 border-t border-gray-200">
              <button
                onClick={() => {
                  setShowEditor(false)
                  setEditingItem(null)
                }}
                className="px-4 py-2 border border-gray-300 text-gray-700 rounded-md hover:bg-gray-50"
              >
                –û—Ç–º–µ–Ω–∞
              </button>
              <button
                onClick={() => saveContent(editingItem)}
                className="px-4 py-2 bg-edu-blue text-white rounded-md hover:bg-edu-navy flex items-center"
              >
                <Save className="h-4 w-4 mr-2" />
                –°–æ—Ö—Ä–∞–Ω–∏—Ç—å
              </button>
            </div>
          </div>
        </div>
      )}
    </div>
  )
}
